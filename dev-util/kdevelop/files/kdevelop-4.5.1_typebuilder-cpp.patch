commit 603da061d626c57820188b5bb32ff23eb28a2040
Author: Milian Wolff <mail@milianw.de>
Date:   Tue Jul 2 21:24:36 2013 +0200

    Check type validity after call to TypeUtils::realType.
    
    It internally also does not assume that, given a valid type, it
    will return a valid type. This hints at issues we have with parsing
    some code and creating reference types or type aliases pointing at
    invalid other types.
    
    At least now we hopefully don't crash anymore.
    
    BUG: 318972

diff --git a/languages/cpp/cppduchain/typebuilder.cpp b/languages/cpp/cppduchain/typebuilder.cpp
index 9182ab1..74694d9 100644
--- a/languages/cpp/cppduchain/typebuilder.cpp
+++ b/languages/cpp/cppduchain/typebuilder.cpp
@@ -458,21 +458,8 @@ void TypeBuilder::createIntegralTypeForExpression(ExpressionAST* expression)
     }
 
     if ( !delay && res.isValid() && res.isInstance ) {
-      AbstractType::Ptr type = res.type.abstractType();
+      const AbstractType::Ptr& type = prepareTypeForExpression(res.type.abstractType(), integral->modifiers());
       if (type) {
-        if ( m_lastTypeWasAuto ) {
-          // remove references or aliases
-          type = TypeUtils::realType( type, topContext() );
-          // Turn "5" into "int"
-          type = TypeUtils::removeConstants( type, topContext() );
-          // ensure proper const modifier is set
-          type->setModifiers( integral->modifiers() );
-          if (ReferenceType::Ptr ref = lastType().cast<ReferenceType>()) {
-            ref->setBaseType( type );
-            type = ref.cast<AbstractType>();
-          }
-        }
-
         openType( type );
         openedType = true;
       }
@@ -492,6 +479,33 @@ void TypeBuilder::createIntegralTypeForExpression(ExpressionAST* expression)
     closeType();
 }
 
+AbstractType::Ptr TypeBuilder::prepareTypeForExpression(AbstractType::Ptr type, quint64 modifiers)
+{
+  if (!m_lastTypeWasAuto) {
+    return type;
+  }
+
+  // remove references or aliases
+  type = TypeUtils::realType( type, topContext() );
+  // Turn "5" into "int"
+  type = TypeUtils::removeConstants( type, topContext() );
+
+  if (!type) {
+    // NOTE: the type might not be valid anymore, see https://bugs.kde.org/show_bug.cgi?id=318972
+    return type;
+  }
+
+  // ensure proper const modifier is set
+  type->setModifiers( modifiers );
+
+  if (ReferenceType::Ptr ref = lastType().cast<ReferenceType>()) {
+    ref->setBaseType( type );
+    type = ref.cast<AbstractType>();
+  }
+
+  return type;
+}
+
 void TypeBuilder::createTypeForInitializer(InitializerAST *node) {
   if(m_onlyComputeSimplified) {
     return;
