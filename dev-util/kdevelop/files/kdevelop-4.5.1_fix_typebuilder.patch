Author: Milian Wolff <mail@milianw.de>
Author: Vasiliy Yeremeyev <vayerx@gmail.com>

    Verify validity of type after deserialization from the storage.
    
    BUG: 318972

diff --git a/languages/cpp/cppduchain/typebuilder.cpp b/languages/cpp/cppduchain/typebuilder.cpp
index 46b0421..9182ab1 100644
--- a/languages/cpp/cppduchain/typebuilder.cpp
+++ b/languages/cpp/cppduchain/typebuilder.cpp
@@ -459,22 +459,27 @@ void TypeBuilder::createIntegralTypeForExpression(ExpressionAST* expression)
 
     if ( !delay && res.isValid() && res.isInstance ) {
       AbstractType::Ptr type = res.type.abstractType();
-      if ( m_lastTypeWasAuto )
-      {
-        // remove references or aliases
-        type = TypeUtils::realType( type, topContext() );
-        // Turn "5" into "int"
-        type = TypeUtils::removeConstants( type, topContext() );
-        // ensure proper const modifier is set
-        type->setModifiers( integral->modifiers() );
-        if (ReferenceType::Ptr ref = lastType().cast<ReferenceType>()) {
-          ref->setBaseType( type );
-          type = ref.cast<AbstractType>();
+      if (type) {
+        if ( m_lastTypeWasAuto ) {
+          // remove references or aliases
+          type = TypeUtils::realType( type, topContext() );
+          // Turn "5" into "int"
+          if (type) {
+            type = TypeUtils::removeConstants( type, topContext() );
+            if (type) {
+              // ensure proper const modifier is set
+              type->setModifiers( integral->modifiers() );
+              if (ReferenceType::Ptr ref = lastType().cast<ReferenceType>()) {
+                ref->setBaseType( type );
+                type = ref.cast<AbstractType>();
+              }
+            }
+          }
         }
-      }
 
-      openType( type );
-      openedType = true;
+        openType( type );
+        openedType = true;
+      }
     }
   }
   if( delay || !openedType ) {
